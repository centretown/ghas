

[
  {
    "domain": "persistent_notification",
    "services": {
      "create": {
        "description": "Shows a notification on the **Notifications** panel.",
        "fields": {
          "message": {
            "description": "Message body of the notification.",
            "example": "Please check your configuration.yaml.",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "notification_id": {
            "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID.",
            "example": 1234,
            "name": "Notification ID",
            "selector": {
              "text": null
            }
          },
          "title": {
            "description": "Optional title of the notification.",
            "example": "Test notification",
            "name": "Title",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Create"
      },
      "dismiss": {
        "description": "Removes a notification from the **Notifications** panel.",
        "fields": {
          "notification_id": {
            "description": "ID of the notification to be removed.",
            "example": 1234,
            "name": "Notification ID",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Dismiss"
      },
      "dismiss_all": {
        "description": "Removes all notifications from the **Notifications** panel.",
        "fields": {},
        "name": "Dismiss all"
      }
    }
  },
  {
    "domain": "homeassistant",
    "services": {
      "check_config": {
        "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
        "fields": {},
        "name": "Check configuration"
      },
      "reload_all": {
        "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
        "fields": {},
        "name": "Reload all"
      },
      "reload_config_entry": {
        "description": "Reloads the specified config entry.",
        "fields": {
          "entry_id": {
            "advanced": true,
            "description": "The configuration entry ID of the entry to be reloaded.",
            "example": "8955375327824e14ba89e4b29cc3ec9a",
            "name": "Config entry ID",
            "required": false,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Reload config entry",
        "target": {
          "device": [
            {}
          ],
          "entity": [
            {}
          ]
        }
      },
      "reload_core_config": {
        "description": "Reloads the core configuration from the YAML-configuration.",
        "fields": {},
        "name": "Reload core configuration"
      },
      "reload_custom_templates": {
        "description": "Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.",
        "fields": {},
        "name": "Reload custom Jinja2 templates"
      },
      "restart": {
        "description": "Restarts Home Assistant.",
        "fields": {},
        "name": "Restart"
      },
      "save_persistent_states": {
        "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
        "fields": {},
        "name": "Save persistent states"
      },
      "set_location": {
        "description": "Updates the Home Assistant location.",
        "fields": {
          "elevation": {
            "description": "Elevation of your location.",
            "example": 120,
            "name": "Elevation",
            "required": false,
            "selector": {
              "number": {
                "mode": "box",
                "step": "any"
              }
            }
          },
          "latitude": {
            "description": "Latitude of your location.",
            "example": 32.87336,
            "name": "Latitude",
            "required": true,
            "selector": {
              "number": {
                "max": 90,
                "min": -90,
                "mode": "box",
                "step": "any"
              }
            }
          },
          "longitude": {
            "description": "Longitude of your location.",
            "example": 117.22743,
            "name": "Longitude",
            "required": true,
            "selector": {
              "number": {
                "max": 180,
                "min": -180,
                "mode": "box",
                "step": "any"
              }
            }
          }
        },
        "name": "Set location"
      },
      "stop": {
        "description": "Stops Home Assistant.",
        "fields": {},
        "name": "Stop"
      },
      "toggle": {
        "description": "Generic service to toggle devices on/off under any domain.",
        "fields": {},
        "name": "Generic toggle",
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "turn_off": {
        "description": "Generic service to turn devices off under any domain.",
        "fields": {},
        "name": "Generic turn off",
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "turn_on": {
        "description": "Generic service to turn devices on under any domain.",
        "fields": {},
        "name": "Generic turn on",
        "target": {
          "entity": [
            {}
          ]
        }
      },
      "update_entity": {
        "description": "Forces one or more entities to update its data.",
        "fields": {},
        "name": "Update entity",
        "target": {
          "entity": [
            {}
          ]
        }
      }
    }
  },
  {
    "domain": "system_log",
    "services": {
      "clear": {
        "description": "Clears all log entries.",
        "fields": {},
        "name": "Clear all"
      },
      "write": {
        "description": "Write log entry.",
        "fields": {
          "level": {
            "default": "error",
            "description": "Log level.",
            "name": "Level",
            "selector": {
              "select": {
                "options": [
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "critical"
                ],
                "translation_key": "level"
              }
            }
          },
          "logger": {
            "description": "Logger name under which to log the message. Defaults to `system_log.external`.",
            "example": "mycomponent.myplatform",
            "name": "Logger",
            "selector": {
              "text": null
            }
          },
          "message": {
            "description": "Message to log.",
            "example": "Something went wrong",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Write"
      }
    }
  },
  {
    "domain": "logger",
    "services": {
      "set_default_level": {
        "description": "Sets the default log level for integrations.",
        "fields": {
          "level": {
            "description": "Default severity level for all integrations.",
            "name": "Level",
            "selector": {
              "select": {
                "options": [
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "fatal",
                  "critical"
                ],
                "translation_key": "level"
              }
            }
          }
        },
        "name": "Set default level"
      },
      "set_level": {
        "description": "Sets the log level for one or more integrations.",
        "fields": {},
        "name": "Set level"
      }
    }
  },
  {
    "domain": "recorder",
    "services": {
      "disable": {
        "description": "Stops the recording of events and state changes.",
        "fields": {},
        "name": "Disable"
      },
      "enable": {
        "description": "Starts the recording of events and state changes.",
        "fields": {},
        "name": "Enable"
      },
      "purge": {
        "description": "Starts purge task - to clean up old data from your database.",
        "fields": {
          "apply_filter": {
            "default": false,
            "description": "Apply `entity_id` and `event_type` filters in addition to time-based purge.",
            "name": "Apply filter",
            "selector": {
              "boolean": null
            }
          },
          "keep_days": {
            "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.",
            "name": "Days to keep",
            "selector": {
              "number": {
                "max": 365,
                "min": 0,
                "unit_of_measurement": "days"
              }
            }
          },
          "repack": {
            "default": false,
            "description": "Attempt to save disk space by rewriting the entire database file.",
            "name": "Repack",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Purge"
      },
      "purge_entities": {
        "description": "Starts a purge task to remove the data related to specific entities from your database.",
        "fields": {
          "domains": {
            "description": "List of domains for which the data needs to be removed from the recorder database.",
            "example": "sun",
            "name": "Domains to remove",
            "required": false,
            "selector": {
              "object": null
            }
          },
          "entity_globs": {
            "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database.",
            "example": "domain*.object_id*",
            "name": "Entity globs to remove",
            "required": false,
            "selector": {
              "object": null
            }
          },
          "entity_id": {
            "description": "List of entities for which the data is to be removed from the recorder database.",
            "name": "Entities to remove",
            "required": false,
            "selector": {
              "entity": {
                "multiple": true
              }
            }
          },
          "keep_days": {
            "default": 0,
            "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.",
            "name": "Days to keep",
            "selector": {
              "number": {
                "max": 365,
                "min": 0,
                "unit_of_measurement": "days"
              }
            }
          }
        },
        "name": "Purge entities"
      }
    }
  },
  {
    "domain": "person",
    "services": {
      "reload": {
        "description": "Reloads persons from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      }
    }
  },
  {
    "domain": "frontend",
    "services": {
      "reload_themes": {
        "description": "Reloads themes from the YAML-configuration.",
        "fields": {},
        "name": "Reload themes"
      },
      "set_theme": {
        "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
        "fields": {
          "mode": {
            "default": "light",
            "description": "Theme mode.",
            "name": "Mode",
            "selector": {
              "select": {
                "options": [
                  "dark",
                  "light"
                ],
                "translation_key": "mode"
              }
            }
          },
          "name": {
            "description": "Name of a theme.",
            "example": "default",
            "name": "Theme",
            "required": true,
            "selector": {
              "theme": {
                "include_default": true
              }
            }
          }
        },
        "name": "Set the default theme"
      }
    }
  },
  {
    "domain": "cloud",
    "services": {
      "remote_connect": {
        "description": "Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.",
        "fields": {},
        "name": "Remote connect"
      },
      "remote_disconnect": {
        "description": "Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.",
        "fields": {},
        "name": "Remote disconnect"
      }
    }
  },
  {
    "domain": "ffmpeg",
    "services": {
      "restart": {
        "description": "Sends a restart command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "description": "Name of entity that will restart. Platform dependent.",
            "name": "Entity",
            "selector": {
              "entity": {
                "domain": "binary_sensor",
                "integration": "ffmpeg"
              }
            }
          }
        },
        "name": "Restart"
      },
      "start": {
        "description": "Sends a start command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "description": "Name of entity that will start. Platform dependent.",
            "name": "Entity",
            "selector": {
              "entity": {
                "domain": "binary_sensor",
                "integration": "ffmpeg"
              }
            }
          }
        },
        "name": "Start"
      },
      "stop": {
        "description": "Sends a stop command to a ffmpeg based sensor.",
        "fields": {
          "entity_id": {
            "description": "Name of entity that will stop. Platform dependent.",
            "name": "Entity",
            "selector": {
              "entity": {
                "domain": "binary_sensor",
                "integration": "ffmpeg"
              }
            }
          }
        },
        "name": "Stop"
      }
    }
  },
  {
    "domain": "tts",
    "services": {
      "clear_cache": {
        "description": "Removes all cached text-to-speech files and purges the memory.",
        "fields": {},
        "name": "Clear TTS cache"
      },
      "cloud_say": {
        "description": "Say something using text-to-speech on a media player with cloud.",
        "fields": {
          "cache": {
            "default": false,
            "selector": {
              "boolean": null
            }
          },
          "entity_id": {
            "required": true,
            "selector": {
              "entity": {
                "domain": "media_player"
              }
            }
          },
          "language": {
            "example": "ru",
            "selector": {
              "text": null
            }
          },
          "message": {
            "example": "My name is hanna",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "options": {
            "advanced": true,
            "example": "platform specific",
            "selector": {
              "object": null
            }
          }
        },
        "name": "Say a TTS message with cloud"
      },
      "speak": {
        "description": "Speaks something using text-to-speech on a media player.",
        "fields": {
          "cache": {
            "default": true,
            "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly.",
            "name": "Cache",
            "selector": {
              "boolean": null
            }
          },
          "language": {
            "description": "Language to use for speech generation.",
            "example": "ru",
            "name": "Language",
            "selector": {
              "text": null
            }
          },
          "media_player_entity_id": {
            "description": "Media players to play the message.",
            "name": "Media player entity",
            "required": true,
            "selector": {
              "entity": {
                "domain": "media_player"
              }
            }
          },
          "message": {
            "description": "The text you want to convert into speech so that you can listen to it on your device.",
            "example": "My name is hanna",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "options": {
            "advanced": true,
            "description": "A dictionary containing integration-specific options.",
            "example": "platform specific",
            "name": "Options",
            "selector": {
              "object": null
            }
          }
        },
        "name": "Speak",
        "target": {
          "entity": [
            {
              "domain": [
                "tts"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "scene",
    "services": {
      "apply": {
        "description": "Activates a scene with configuration.",
        "fields": {
          "entities": {
            "description": "List of entities and their target state.",
            "example": "light.kitchen: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 80\n",
            "name": "Entities state",
            "required": true,
            "selector": {
              "object": null
            }
          },
          "transition": {
            "description": "Time it takes the devices to transition into the states defined in the scene.",
            "name": "Transition",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          }
        },
        "name": "Apply"
      },
      "create": {
        "description": "Creates a new scene.",
        "fields": {
          "entities": {
            "advanced": true,
            "description": "List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead.",
            "example": "light.tv_back_light: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 200\n",
            "name": "Entities state",
            "selector": {
              "object": null
            }
          },
          "scene_id": {
            "description": "The entity ID of the new scene.",
            "example": "all_lights",
            "name": "Scene entity ID",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "snapshot_entities": {
            "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`.",
            "example": "- light.ceiling\n- light.kitchen\n",
            "name": "Snapshot entities",
            "selector": {
              "entity": {
                "multiple": true
              }
            }
          }
        },
        "name": "Create"
      },
      "delete": {
        "description": "Deletes a dynamically created scene.",
        "fields": {},
        "name": "Delete",
        "target": {
          "entity": [
            {
              "domain": [
                "scene"
              ],
              "integration": "homeassistant"
            }
          ]
        }
      },
      "reload": {
        "description": "Reloads the scenes from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "turn_on": {
        "description": "Activates a scene.",
        "fields": {
          "transition": {
            "description": "Time it takes the devices to transition into the states defined in the scene.",
            "name": "Transition",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          }
        },
        "name": "Activate",
        "target": {
          "entity": [
            {
              "domain": [
                "scene"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "logbook",
    "services": {
      "log": {
        "description": "Creates a custom entry in the logbook.",
        "fields": {
          "domain": {
            "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry.",
            "example": "light",
            "name": "Domain",
            "selector": {
              "text": null
            }
          },
          "entity_id": {
            "description": "Entity to reference in the logbook entry.",
            "name": "Entity ID",
            "selector": {
              "entity": null
            }
          },
          "message": {
            "description": "Message of the logbook entry.",
            "example": "is being used",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "name": {
            "description": "Custom name for an entity, can be referenced using an `entity_id`.",
            "example": "Kitchen",
            "name": "Name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Log"
      }
    }
  },
  {
    "domain": "automation",
    "services": {
      "reload": {
        "description": "Reloads the automation configuration.",
        "fields": {},
        "name": "Reload"
      },
      "toggle": {
        "description": "Toggles (enable / disable) an automation.",
        "fields": {},
        "name": "Toggle",
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "trigger": {
        "description": "Triggers the actions of an automation.",
        "fields": {
          "skip_condition": {
            "default": true,
            "description": "Defines whether or not the conditions will be skipped.",
            "name": "Skip conditions",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Trigger",
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Disables an automation.",
        "fields": {
          "stop_actions": {
            "default": true,
            "description": "Stops currently running actions.",
            "name": "Stop actions",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Enables an automation.",
        "fields": {},
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "automation"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "script",
    "services": {
      "reload": {
        "description": "Reloads all the available scripts.",
        "fields": {},
        "name": "Reload"
      },
      "toggle": {
        "description": "Toggle a script. Starts it, if isn't running, stops it otherwise.",
        "fields": {},
        "name": "Toggle",
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Stops a running script.",
        "fields": {},
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Runs the sequence of actions defined in a script.",
        "fields": {},
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "script"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_number",
    "services": {
      "decrement": {
        "description": "Decrements the current value by 1 step.",
        "fields": {},
        "name": "Decrement",
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      },
      "increment": {
        "description": "Increments the value by 1 step.",
        "fields": {},
        "name": "Increment",
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      },
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "set_value": {
        "description": "Sets the value.",
        "fields": {
          "value": {
            "description": "The target value.",
            "name": "Value",
            "required": true,
            "selector": {
              "number": {
                "max": 9223372036854776000,
                "min": 0,
                "mode": "box",
                "step": 0.001
              }
            }
          }
        },
        "name": "Set",
        "target": {
          "entity": [
            {
              "domain": [
                "input_number"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_button",
    "services": {
      "press": {
        "description": "Mimics the physical button press on the device.",
        "fields": {},
        "name": "Press",
        "target": {
          "entity": [
            {
              "domain": [
                "input_button"
              ]
            }
          ]
        }
      },
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      }
    }
  },
  {
    "domain": "zone",
    "services": {
      "reload": {
        "description": "Reloads zones from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      }
    }
  },
  {
    "domain": "input_boolean",
    "services": {
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "toggle": {
        "description": "Toggles the helper on/off.",
        "fields": {},
        "name": "Toggle",
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Turns off the helper.",
        "fields": {},
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Turns on the helper.",
        "fields": {},
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "input_boolean"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "timer",
    "services": {
      "cancel": {
        "description": "Cancels a timer.",
        "fields": {},
        "name": "Cancel",
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "change": {
        "description": "Changes a timer.",
        "fields": {
          "duration": {
            "default": 0,
            "description": "Duration to add or subtract to the running timer.",
            "example": "00:01:00, 60 or -60",
            "name": "Duration",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Change",
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "finish": {
        "description": "Finishes a timer.",
        "fields": {},
        "name": "Finish",
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "pause": {
        "description": "Pauses a timer.",
        "fields": {},
        "name": "Pause",
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      },
      "reload": {
        "description": "Reloads timers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "start": {
        "description": "Starts a timer.",
        "fields": {
          "duration": {
            "description": "Duration the timer requires to finish. [optional].",
            "example": "00:01:00 or 60",
            "name": "Duration",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Start",
        "target": {
          "entity": [
            {
              "domain": [
                "timer"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "conversation",
    "services": {
      "process": {
        "description": "Launches a conversation from a transcribed text.",
        "fields": {
          "agent_id": {
            "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands.",
            "example": "homeassistant",
            "name": "Agent",
            "selector": {
              "conversation_agent": null
            }
          },
          "conversation_id": {
            "description": "ID of the conversation, to be able to continue a previous conversation",
            "example": "my_conversation_1",
            "name": "Conversation ID",
            "selector": {
              "text": null
            }
          },
          "language": {
            "description": "Language of text. Defaults to server language.",
            "example": "NL",
            "name": "Language",
            "selector": {
              "text": null
            }
          },
          "text": {
            "description": "Transcribed text input.",
            "example": "Turn all lights on",
            "name": "Text",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Process",
        "response": {
          "optional": true
        }
      },
      "reload": {
        "description": "Reloads the intent configuration.",
        "fields": {
          "agent_id": {
            "description": "Conversation agent to reload.",
            "example": "homeassistant",
            "name": "Agent",
            "selector": {
              "conversation_agent": null
            }
          },
          "language": {
            "description": "Language to clear cached intents for. Defaults to server language.",
            "example": "NL",
            "name": "Language",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Reload"
      }
    }
  },
  {
    "domain": "input_select",
    "services": {
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "select_first": {
        "description": "Selects the first option.",
        "fields": {},
        "name": "First",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_last": {
        "description": "Selects the last option.",
        "fields": {},
        "name": "Last",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_next": {
        "description": "Select the next option.",
        "fields": {
          "cycle": {
            "default": true,
            "description": "If the option should cycle from the last to the first option on the list.",
            "name": "Cycle",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Next",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_option": {
        "description": "Selects an option.",
        "fields": {
          "option": {
            "description": "Option to be selected.",
            "example": "\"Item A\"",
            "name": "Option",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Select",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "select_previous": {
        "description": "Selects the previous option.",
        "fields": {
          "cycle": {
            "default": true,
            "description": "If the option should cycle from the last to the first option on the list.",
            "name": "Cycle",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Previous",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      },
      "set_options": {
        "description": "Sets the options.",
        "fields": {
          "options": {
            "description": "List of options.",
            "example": "[\"Item A\", \"Item B\", \"Item C\"]",
            "name": "Options",
            "required": true,
            "selector": {
              "object": null
            }
          }
        },
        "name": "Set options",
        "target": {
          "entity": [
            {
              "domain": [
                "input_select"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "schedule",
    "services": {
      "reload": {
        "description": "Reloads schedules from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      }
    }
  },
  {
    "domain": "counter",
    "services": {
      "decrement": {
        "description": "Decrements a counter.",
        "fields": {},
        "name": "Decrement",
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "increment": {
        "description": "Increments a counter.",
        "fields": {},
        "name": "Increment",
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "reset": {
        "description": "Resets a counter.",
        "fields": {},
        "name": "Reset",
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      },
      "set_value": {
        "description": "Sets the counter value.",
        "fields": {
          "value": {
            "description": "The new counter value the entity should be set to.",
            "name": "Value",
            "required": true,
            "selector": {
              "number": {
                "max": 9223372036854776000,
                "min": 0,
                "mode": "box"
              }
            }
          }
        },
        "name": "Set",
        "target": {
          "entity": [
            {
              "domain": [
                "counter"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "input_datetime",
    "services": {
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "set_datetime": {
        "description": "Sets the date and/or time.",
        "fields": {
          "date": {
            "description": "The target date.",
            "example": "\"2019-04-20\"",
            "name": "Date",
            "selector": {
              "text": null
            }
          },
          "datetime": {
            "description": "The target date \u0026 time.",
            "example": "\"2019-04-20 05:04:20\"",
            "name": "Date \u0026 time",
            "selector": {
              "text": null
            }
          },
          "time": {
            "description": "The target time.",
            "example": "\"05:04:20\"",
            "name": "Time",
            "selector": {
              "time": null
            }
          },
          "timestamp": {
            "description": "The target date \u0026 time, expressed by a UNIX timestamp.",
            "name": "Timestamp",
            "selector": {
              "number": {
                "max": 9223372036854776000,
                "min": 0,
                "mode": "box"
              }
            }
          }
        },
        "name": "Set",
        "target": {
          "entity": [
            {
              "domain": [
                "input_datetime"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "backup",
    "services": {
      "create": {
        "description": "Creates a new backup.",
        "fields": {},
        "name": "Create backup"
      }
    }
  },
  {
    "domain": "input_text",
    "services": {
      "reload": {
        "description": "Reloads helpers from the YAML-configuration.",
        "fields": {},
        "name": "Reload"
      },
      "set_value": {
        "description": "Sets the value.",
        "fields": {
          "value": {
            "description": "The target value.",
            "example": "This is an example text",
            "name": "Value",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Set",
        "target": {
          "entity": [
            {
              "domain": [
                "input_text"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "notify",
    "services": {
      "mobile_app_huawei_mla_l03": {
        "description": "Sends a notification message using the mobile_app_huawei_mla_l03 integration.",
        "fields": {
          "data": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "message": {
            "example": "The garage door has been open for 10 minutes.",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "target": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "title": {
            "example": "Your Garage Door Friend",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Send a notification via mobile_app_huawei_mla_l03"
      },
      "mobile_app_sm_a037w": {
        "description": "Sends a notification message using the mobile_app_sm_a037w integration.",
        "fields": {
          "data": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "message": {
            "example": "The garage door has been open for 10 minutes.",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "target": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "title": {
            "example": "Your Garage Door Friend",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Send a notification via mobile_app_sm_a037w"
      },
      "notify": {
        "description": "Sends a notification message using the notify service.",
        "fields": {
          "data": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "message": {
            "example": "The garage door has been open for 10 minutes.",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "target": {
            "example": "platform specific",
            "selector": {
              "object": null
            }
          },
          "title": {
            "example": "Your Garage Door Friend",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Send a notification with notify"
      },
      "persistent_notification": {
        "description": "Sends a notification that is visible in the **Notifications** panel.",
        "fields": {
          "data": {
            "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation..",
            "example": "platform specific",
            "name": "Data",
            "selector": {
              "object": null
            }
          },
          "message": {
            "description": "Message body of the notification.",
            "example": "The garage door has been open for 10 minutes.",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "title": {
            "description": "Title of the notification.",
            "example": "Your Garage Door Friend",
            "name": "Title",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Send a persistent notification"
      },
      "send_message": {
        "description": "Sends a notification message.",
        "fields": {
          "message": {
            "description": "Your notification message.",
            "name": "Message",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Send a notification message",
        "target": {
          "entity": [
            {
              "domain": [
                "notify"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "shopping_list",
    "services": {
      "add_item": {
        "description": "Adds an item to the shopping list.",
        "fields": {
          "name": {
            "description": "The name of the item to add.",
            "example": "Beer",
            "name": "Name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Add item"
      },
      "clear_completed_items": {
        "description": "Clears completed items from the shopping list.",
        "fields": {},
        "name": "Clear completed items"
      },
      "complete_all": {
        "description": "Marks all items as completed in the shopping list (without removing them from the list).",
        "fields": {},
        "name": "Complete all"
      },
      "complete_item": {
        "description": "Marks the first item with matching name as completed in the shopping list.",
        "fields": {
          "name": {
            "description": "The name of the item to mark as completed (without removing).",
            "example": "Beer",
            "name": "Name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Complete item"
      },
      "incomplete_all": {
        "description": "Marks all items as incomplete in the shopping list.",
        "fields": {},
        "name": "Incomplete all"
      },
      "incomplete_item": {
        "description": "Marks the first item with matching name as incomplete in the shopping list.",
        "fields": {
          "name": {
            "description": "The name of the item to mark as incomplete.",
            "example": "Beer",
            "name": "Name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Incomplete item"
      },
      "remove_item": {
        "description": "Removes the first item with matching name from the shopping list.",
        "fields": {
          "name": {
            "description": "The name of the item to remove.",
            "example": "Beer",
            "name": "Name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Remove item"
      },
      "sort": {
        "description": "Sorts all items by name in the shopping list.",
        "fields": {
          "reverse": {
            "default": false,
            "description": "Whether to sort in reverse (descending) order.",
            "name": "Sort reverse",
            "selector": {
              "boolean": null
            }
          }
        },
        "name": "Sort all items"
      }
    }
  },
  {
    "domain": "todo",
    "services": {
      "add_item": {
        "description": "Add a new to-do list item.",
        "fields": {
          "description": {
            "description": "A more complete description of the to-do item than provided by the item name.",
            "example": "A more complete description of the to-do item than that provided by the summary.",
            "filter": {
              "supported_features": [
                64
              ]
            },
            "name": "Description",
            "selector": {
              "text": null
            }
          },
          "due_date": {
            "description": "The date the to-do item is expected to be completed.",
            "example": "2023-11-17",
            "filter": {
              "supported_features": [
                16
              ]
            },
            "name": "Due date",
            "selector": {
              "date": null
            }
          },
          "due_datetime": {
            "description": "The date and time the to-do item is expected to be completed.",
            "example": "2023-11-17 13:30:00",
            "filter": {
              "supported_features": [
                32
              ]
            },
            "name": "Due date and time",
            "selector": {
              "datetime": null
            }
          },
          "item": {
            "description": "The name that represents the to-do item.",
            "example": "Submit income tax return",
            "name": "Item name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Add to-do list item",
        "target": {
          "entity": [
            {
              "domain": [
                "todo"
              ],
              "supported_features": [
                1
              ]
            }
          ]
        }
      },
      "get_items": {
        "description": "Get items on a to-do list.",
        "fields": {
          "status": {
            "default": "needs_action",
            "description": "Only return to-do items with the specified statuses. Returns not completed actions by default.",
            "example": "needs_action",
            "name": "Status",
            "selector": {
              "select": {
                "multiple": true,
                "options": [
                  "needs_action",
                  "completed"
                ],
                "translation_key": "status"
              }
            }
          }
        },
        "name": "Get to-do list items",
        "response": {
          "optional": false
        },
        "target": {
          "entity": [
            {
              "domain": [
                "todo"
              ]
            }
          ]
        }
      },
      "remove_completed_items": {
        "description": "Remove all to-do list items that have been completed.",
        "fields": {},
        "name": "Remove all completed to-do list items",
        "target": {
          "entity": [
            {
              "domain": [
                "todo"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "remove_item": {
        "description": "Remove an existing to-do list item by its name.",
        "fields": {
          "item": {
            "description": "The name for the to-do list items.",
            "name": "Item name",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Remove a to-do list item",
        "target": {
          "entity": [
            {
              "domain": [
                "todo"
              ],
              "supported_features": [
                2
              ]
            }
          ]
        }
      },
      "update_item": {
        "description": "Update an existing to-do list item based on its name.",
        "fields": {
          "description": {
            "description": "A more complete description of the to-do item than provided by the item name.",
            "example": "A more complete description of the to-do item than that provided by the summary.",
            "filter": {
              "supported_features": [
                64
              ]
            },
            "name": "Description",
            "selector": {
              "text": null
            }
          },
          "due_date": {
            "description": "The date the to-do item is expected to be completed.",
            "example": "2023-11-17",
            "filter": {
              "supported_features": [
                16
              ]
            },
            "name": "Due date",
            "selector": {
              "date": null
            }
          },
          "due_datetime": {
            "description": "The date and time the to-do item is expected to be completed.",
            "example": "2023-11-17 13:30:00",
            "filter": {
              "supported_features": [
                32
              ]
            },
            "name": "Due date and time",
            "selector": {
              "datetime": null
            }
          },
          "item": {
            "description": "The name for the to-do list item.",
            "example": "Submit income tax return",
            "name": "Item name",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "rename": {
            "description": "The new name of the to-do item",
            "example": "Something else",
            "name": "Rename item",
            "selector": {
              "text": null
            }
          },
          "status": {
            "description": "A status or confirmation of the to-do item.",
            "example": "needs_action",
            "name": "Set status",
            "selector": {
              "select": {
                "options": [
                  "needs_action",
                  "completed"
                ],
                "translation_key": "status"
              }
            }
          }
        },
        "name": "Update to-do list item",
        "target": {
          "entity": [
            {
              "domain": [
                "todo"
              ],
              "supported_features": [
                4
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "weather",
    "services": {
      "get_forecast": {
        "description": "Get weather forecast.",
        "fields": {
          "type": {
            "description": "Forecast type: daily, hourly or twice daily.",
            "name": "Forecast type",
            "required": true,
            "selector": {
              "select": {
                "options": [
                  "daily",
                  "hourly",
                  "twice_daily"
                ],
                "translation_key": "forecast_type"
              }
            }
          }
        },
        "name": "Get forecast",
        "response": {
          "optional": false
        },
        "target": {
          "entity": [
            {
              "domain": [
                "weather"
              ],
              "supported_features": [
                1,
                2,
                4
              ]
            }
          ]
        }
      },
      "get_forecasts": {
        "description": "Get weather forecasts.",
        "fields": {
          "type": {
            "description": "Forecast type: daily, hourly or twice daily.",
            "name": "Forecast type",
            "required": true,
            "selector": {
              "select": {
                "options": [
                  "daily",
                  "hourly",
                  "twice_daily"
                ],
                "translation_key": "forecast_type"
              }
            }
          }
        },
        "name": "Get forecasts",
        "response": {
          "optional": false
        },
        "target": {
          "entity": [
            {
              "domain": [
                "weather"
              ],
              "supported_features": [
                1,
                2,
                4
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "light",
    "services": {
      "toggle": {
        "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
        "fields": {
          "brightness": {
            "advanced": true,
            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness value",
            "selector": {
              "number": {
                "max": 255,
                "min": 0
              }
            }
          },
          "brightness_pct": {
            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness",
            "selector": {
              "number": {
                "max": 100,
                "min": 0,
                "unit_of_measurement": "%"
              }
            }
          },
          "color_name": {
            "advanced": true,
            "description": "A human-readable color name.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color name",
            "selector": {
              "select": {
                "options": [
                  "homeassistant",
                  "aliceblue",
                  "antiquewhite",
                  "aqua",
                  "aquamarine",
                  "azure",
                  "beige",
                  "bisque",
                  "blanchedalmond",
                  "blue",
                  "blueviolet",
                  "brown",
                  "burlywood",
                  "cadetblue",
                  "chartreuse",
                  "chocolate",
                  "coral",
                  "cornflowerblue",
                  "cornsilk",
                  "crimson",
                  "cyan",
                  "darkblue",
                  "darkcyan",
                  "darkgoldenrod",
                  "darkgray",
                  "darkgreen",
                  "darkgrey",
                  "darkkhaki",
                  "darkmagenta",
                  "darkolivegreen",
                  "darkorange",
                  "darkorchid",
                  "darkred",
                  "darksalmon",
                  "darkseagreen",
                  "darkslateblue",
                  "darkslategray",
                  "darkslategrey",
                  "darkturquoise",
                  "darkviolet",
                  "deeppink",
                  "deepskyblue",
                  "dimgray",
                  "dimgrey",
                  "dodgerblue",
                  "firebrick",
                  "floralwhite",
                  "forestgreen",
                  "fuchsia",
                  "gainsboro",
                  "ghostwhite",
                  "gold",
                  "goldenrod",
                  "gray",
                  "green",
                  "greenyellow",
                  "grey",
                  "honeydew",
                  "hotpink",
                  "indianred",
                  "indigo",
                  "ivory",
                  "khaki",
                  "lavender",
                  "lavenderblush",
                  "lawngreen",
                  "lemonchiffon",
                  "lightblue",
                  "lightcoral",
                  "lightcyan",
                  "lightgoldenrodyellow",
                  "lightgray",
                  "lightgreen",
                  "lightgrey",
                  "lightpink",
                  "lightsalmon",
                  "lightseagreen",
                  "lightskyblue",
                  "lightslategray",
                  "lightslategrey",
                  "lightsteelblue",
                  "lightyellow",
                  "lime",
                  "limegreen",
                  "linen",
                  "magenta",
                  "maroon",
                  "mediumaquamarine",
                  "mediumblue",
                  "mediumorchid",
                  "mediumpurple",
                  "mediumseagreen",
                  "mediumslateblue",
                  "mediumspringgreen",
                  "mediumturquoise",
                  "mediumvioletred",
                  "midnightblue",
                  "mintcream",
                  "mistyrose",
                  "moccasin",
                  "navajowhite",
                  "navy",
                  "navyblue",
                  "oldlace",
                  "olive",
                  "olivedrab",
                  "orange",
                  "orangered",
                  "orchid",
                  "palegoldenrod",
                  "palegreen",
                  "paleturquoise",
                  "palevioletred",
                  "papayawhip",
                  "peachpuff",
                  "peru",
                  "pink",
                  "plum",
                  "powderblue",
                  "purple",
                  "red",
                  "rosybrown",
                  "royalblue",
                  "saddlebrown",
                  "salmon",
                  "sandybrown",
                  "seagreen",
                  "seashell",
                  "sienna",
                  "silver",
                  "skyblue",
                  "slateblue",
                  "slategray",
                  "slategrey",
                  "snow",
                  "springgreen",
                  "steelblue",
                  "tan",
                  "teal",
                  "thistle",
                  "tomato",
                  "turquoise",
                  "violet",
                  "wheat",
                  "white",
                  "whitesmoke",
                  "yellow",
                  "yellowgreen"
                ],
                "translation_key": "color_name"
              }
            }
          },
          "color_temp": {
            "advanced": true,
            "description": "Color temperature in mireds.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color temperature",
            "selector": {
              "color_temp": null
            }
          },
          "effect": {
            "description": "Light effect.",
            "filter": {
              "supported_features": [
                4
              ]
            },
            "name": "Effect",
            "selector": {
              "text": null
            }
          },
          "flash": {
            "advanced": true,
            "description": "Tell light to flash, can be either value short or long.",
            "filter": {
              "supported_features": [
                8
              ]
            },
            "name": "Flash",
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            }
          },
          "hs_color": {
            "advanced": true,
            "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100.",
            "example": "[300, 70]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Hue/Sat color",
            "selector": {
              "object": null
            }
          },
          "kelvin": {
            "advanced": true,
            "description": "Color temperature in Kelvin.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color temperature",
            "selector": {
              "color_temp": {
                "max": 6500,
                "min": 2000,
                "unit": "kelvin"
              }
            }
          },
          "profile": {
            "advanced": true,
            "description": "Name of a light profile to use.",
            "example": "relax",
            "name": "Profile",
            "selector": {
              "text": null
            }
          },
          "rgb_color": {
            "advanced": true,
            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.",
            "example": "[255, 100, 100]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color",
            "selector": {
              "color_rgb": null
            }
          },
          "transition": {
            "description": "Duration it takes to get to next state.",
            "filter": {
              "supported_features": [
                32
              ]
            },
            "name": "Transition",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          },
          "white": {
            "advanced": true,
            "description": "Set the light to white mode.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "white"
                ]
              }
            },
            "name": "White",
            "selector": {
              "constant": {
                "label": "Enabled",
                "value": true
              }
            }
          },
          "xy_color": {
            "advanced": true,
            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1.",
            "example": "[0.52, 0.43]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "XY-color",
            "selector": {
              "object": null
            }
          }
        },
        "name": "Toggle",
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Turn off one or more lights.",
        "fields": {
          "flash": {
            "advanced": true,
            "description": "Tell light to flash, can be either value short or long.",
            "filter": {
              "supported_features": [
                8
              ]
            },
            "name": "Flash",
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            }
          },
          "transition": {
            "description": "Duration it takes to get to next state.",
            "filter": {
              "supported_features": [
                32
              ]
            },
            "name": "Transition",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          }
        },
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
        "fields": {
          "brightness": {
            "advanced": true,
            "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness value",
            "selector": {
              "number": {
                "max": 255,
                "min": 0
              }
            }
          },
          "brightness_pct": {
            "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness",
            "selector": {
              "number": {
                "max": 100,
                "min": 0,
                "unit_of_measurement": "%"
              }
            }
          },
          "brightness_step": {
            "advanced": true,
            "description": "Change brightness by an amount.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness step value",
            "selector": {
              "number": {
                "max": 255,
                "min": -225
              }
            }
          },
          "brightness_step_pct": {
            "description": "Change brightness by a percentage.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "brightness",
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Brightness step",
            "selector": {
              "number": {
                "max": 100,
                "min": -100,
                "unit_of_measurement": "%"
              }
            }
          },
          "color_name": {
            "advanced": true,
            "description": "A human-readable color name.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color name",
            "selector": {
              "select": {
                "options": [
                  "homeassistant",
                  "aliceblue",
                  "antiquewhite",
                  "aqua",
                  "aquamarine",
                  "azure",
                  "beige",
                  "bisque",
                  "blanchedalmond",
                  "blue",
                  "blueviolet",
                  "brown",
                  "burlywood",
                  "cadetblue",
                  "chartreuse",
                  "chocolate",
                  "coral",
                  "cornflowerblue",
                  "cornsilk",
                  "crimson",
                  "cyan",
                  "darkblue",
                  "darkcyan",
                  "darkgoldenrod",
                  "darkgray",
                  "darkgreen",
                  "darkgrey",
                  "darkkhaki",
                  "darkmagenta",
                  "darkolivegreen",
                  "darkorange",
                  "darkorchid",
                  "darkred",
                  "darksalmon",
                  "darkseagreen",
                  "darkslateblue",
                  "darkslategray",
                  "darkslategrey",
                  "darkturquoise",
                  "darkviolet",
                  "deeppink",
                  "deepskyblue",
                  "dimgray",
                  "dimgrey",
                  "dodgerblue",
                  "firebrick",
                  "floralwhite",
                  "forestgreen",
                  "fuchsia",
                  "gainsboro",
                  "ghostwhite",
                  "gold",
                  "goldenrod",
                  "gray",
                  "green",
                  "greenyellow",
                  "grey",
                  "honeydew",
                  "hotpink",
                  "indianred",
                  "indigo",
                  "ivory",
                  "khaki",
                  "lavender",
                  "lavenderblush",
                  "lawngreen",
                  "lemonchiffon",
                  "lightblue",
                  "lightcoral",
                  "lightcyan",
                  "lightgoldenrodyellow",
                  "lightgray",
                  "lightgreen",
                  "lightgrey",
                  "lightpink",
                  "lightsalmon",
                  "lightseagreen",
                  "lightskyblue",
                  "lightslategray",
                  "lightslategrey",
                  "lightsteelblue",
                  "lightyellow",
                  "lime",
                  "limegreen",
                  "linen",
                  "magenta",
                  "maroon",
                  "mediumaquamarine",
                  "mediumblue",
                  "mediumorchid",
                  "mediumpurple",
                  "mediumseagreen",
                  "mediumslateblue",
                  "mediumspringgreen",
                  "mediumturquoise",
                  "mediumvioletred",
                  "midnightblue",
                  "mintcream",
                  "mistyrose",
                  "moccasin",
                  "navajowhite",
                  "navy",
                  "navyblue",
                  "oldlace",
                  "olive",
                  "olivedrab",
                  "orange",
                  "orangered",
                  "orchid",
                  "palegoldenrod",
                  "palegreen",
                  "paleturquoise",
                  "palevioletred",
                  "papayawhip",
                  "peachpuff",
                  "peru",
                  "pink",
                  "plum",
                  "powderblue",
                  "purple",
                  "red",
                  "rosybrown",
                  "royalblue",
                  "saddlebrown",
                  "salmon",
                  "sandybrown",
                  "seagreen",
                  "seashell",
                  "sienna",
                  "silver",
                  "skyblue",
                  "slateblue",
                  "slategray",
                  "slategrey",
                  "snow",
                  "springgreen",
                  "steelblue",
                  "tan",
                  "teal",
                  "thistle",
                  "tomato",
                  "turquoise",
                  "violet",
                  "wheat",
                  "white",
                  "whitesmoke",
                  "yellow",
                  "yellowgreen"
                ],
                "translation_key": "color_name"
              }
            }
          },
          "color_temp": {
            "description": "Color temperature in mireds.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color temperature",
            "selector": {
              "color_temp": {
                "max": 500,
                "min": 153,
                "unit": "mired"
              }
            }
          },
          "effect": {
            "description": "Light effect.",
            "filter": {
              "supported_features": [
                4
              ]
            },
            "name": "Effect",
            "selector": {
              "text": null
            }
          },
          "flash": {
            "advanced": true,
            "description": "Tell light to flash, can be either value short or long.",
            "filter": {
              "supported_features": [
                8
              ]
            },
            "name": "Flash",
            "selector": {
              "select": {
                "options": [
                  {
                    "label": "Long",
                    "value": "long"
                  },
                  {
                    "label": "Short",
                    "value": "short"
                  }
                ]
              }
            }
          },
          "hs_color": {
            "advanced": true,
            "description": "Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100.",
            "example": "[300, 70]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Hue/Sat color",
            "selector": {
              "object": null
            }
          },
          "kelvin": {
            "advanced": true,
            "description": "Color temperature in Kelvin.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "color_temp",
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color temperature",
            "selector": {
              "color_temp": {
                "max": 6500,
                "min": 2000,
                "unit": "kelvin"
              }
            }
          },
          "profile": {
            "advanced": true,
            "description": "Name of a light profile to use.",
            "example": "relax",
            "name": "Profile",
            "selector": {
              "text": null
            }
          },
          "rgb_color": {
            "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "Color",
            "selector": {
              "color_rgb": null
            }
          },
          "rgbw_color": {
            "advanced": true,
            "description": "The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white.",
            "example": "[255, 100, 100, 50]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "RGBW-color",
            "selector": {
              "object": null
            }
          },
          "rgbww_color": {
            "advanced": true,
            "description": "The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white.",
            "example": "[255, 100, 100, 50, 70]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "RGBWW-color",
            "selector": {
              "object": null
            }
          },
          "transition": {
            "description": "Duration it takes to get to next state.",
            "filter": {
              "supported_features": [
                32
              ]
            },
            "name": "Transition",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          },
          "white": {
            "advanced": true,
            "description": "Set the light to white mode.",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "white"
                ]
              }
            },
            "name": "White",
            "selector": {
              "constant": {
                "label": "Enabled",
                "value": true
              }
            }
          },
          "xy_color": {
            "advanced": true,
            "description": "Color in XY-format. A list of two decimal numbers between 0 and 1.",
            "example": "[0.52, 0.43]",
            "filter": {
              "attribute": {
                "supported_color_modes": [
                  "hs",
                  "xy",
                  "rgb",
                  "rgbw",
                  "rgbww"
                ]
              }
            },
            "name": "XY-color",
            "selector": {
              "object": null
            }
          }
        },
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "light"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "device_tracker",
    "services": {
      "see": {
        "description": "Records a seen tracked device.",
        "fields": {
          "battery": {
            "description": "Battery level of the device.",
            "name": "Battery level",
            "selector": {
              "number": {
                "max": 100,
                "min": 0,
                "unit_of_measurement": "%"
              }
            }
          },
          "dev_id": {
            "description": "ID of the device (find the ID in `known_devices.yaml`).",
            "example": "phonedave",
            "name": "Device ID",
            "selector": {
              "text": null
            }
          },
          "gps": {
            "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]).",
            "example": "[51.509802, -0.086692]",
            "name": "GPS coordinates",
            "selector": {
              "object": null
            }
          },
          "gps_accuracy": {
            "description": "Accuracy of the GPS coordinates.",
            "name": "GPS accuracy",
            "selector": {
              "number": {
                "min": 0,
                "mode": "box",
                "unit_of_measurement": "m"
              }
            }
          },
          "host_name": {
            "description": "Hostname of the device.",
            "example": "Dave",
            "name": "Hostname",
            "selector": {
              "text": null
            }
          },
          "location_name": {
            "description": "Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone.",
            "example": "home",
            "name": "Location",
            "selector": {
              "text": null
            }
          },
          "mac": {
            "description": "MAC address of the device.",
            "example": "FF:FF:FF:FF:FF:FF",
            "name": "MAC address",
            "selector": {
              "text": null
            }
          }
        },
        "name": "See"
      }
    }
  },
  {
    "domain": "switch",
    "services": {
      "toggle": {
        "description": "Toggles a switch on/off.",
        "fields": {},
        "name": "Toggle",
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Turns a switch off.",
        "fields": {},
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Turns a switch on.",
        "fields": {},
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "switch"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "number",
    "services": {
      "set_value": {
        "description": "Sets the value of a number.",
        "fields": {
          "value": {
            "description": "The target value to set.",
            "example": 42,
            "name": "Value",
            "selector": {
              "text": null
            }
          }
        },
        "name": "Set",
        "target": {
          "entity": [
            {
              "domain": [
                "number"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "domain": "esphome",
    "services": {
      "pan_tilt_pan_camera": {
        "description": "Calls the service pan_camera of the node pan-tilt",
        "fields": {
          "pan_parameter": {
            "description": null,
            "example": "12.3",
            "name": "pan_parameter",
            "required": true,
            "selector": {
              "number": {
                "mode": "box",
                "step": 0.001
              }
            }
          }
        },
        "name": ""
      },
      "pan_tilt_tilt_camera": {
        "description": "Calls the service tilt_camera of the node pan-tilt",
        "fields": {
          "tilt_parameter": {
            "description": null,
            "example": "12.3",
            "name": "tilt_parameter",
            "required": true,
            "selector": {
              "number": {
                "mode": "box",
                "step": 0.001
              }
            }
          }
        },
        "name": ""
      }
    }
  },
  {
    "domain": "camera",
    "services": {
      "disable_motion_detection": {
        "description": "Disables the motion detection.",
        "fields": {},
        "name": "Disable motion detection",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "enable_motion_detection": {
        "description": "Enables the motion detection.",
        "fields": {},
        "name": "Enable motion detection",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "play_stream": {
        "description": "Plays the camera stream on a supported media player.",
        "fields": {
          "format": {
            "default": "hls",
            "description": "Stream format supported by the media player.",
            "name": "Format",
            "selector": {
              "select": {
                "options": [
                  "hls"
                ]
              }
            }
          },
          "media_player": {
            "description": "Media players to stream to.",
            "name": "Media player",
            "required": true,
            "selector": {
              "entity": {
                "domain": "media_player"
              }
            }
          }
        },
        "name": "Play stream",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "record": {
        "description": "Creates a recording of a live camera feed.",
        "fields": {
          "duration": {
            "default": 30,
            "description": "Planned duration of the recording. The actual duration may vary.",
            "name": "Duration",
            "selector": {
              "number": {
                "max": 3600,
                "min": 1,
                "unit_of_measurement": "seconds"
              }
            }
          },
          "filename": {
            "description": "Template of a filename. Variable available is `entity_id`. Must be mp4.",
            "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
            "name": "Filename",
            "required": true,
            "selector": {
              "text": null
            }
          },
          "lookback": {
            "default": 0,
            "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.",
            "name": "Lookback",
            "selector": {
              "number": {
                "max": 300,
                "min": 0,
                "unit_of_measurement": "seconds"
              }
            }
          }
        },
        "name": "Record",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "snapshot": {
        "description": "Takes a snapshot from a camera.",
        "fields": {
          "filename": {
            "description": "Template of a filename. Variable available is `entity_id`.",
            "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
            "name": "Filename",
            "required": true,
            "selector": {
              "text": null
            }
          }
        },
        "name": "Take snapshot",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "turn_off": {
        "description": "Turns off the camera.",
        "fields": {},
        "name": "Turn off",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      },
      "turn_on": {
        "description": "Turns on the camera.",
        "fields": {},
        "name": "Turn on",
        "target": {
          "entity": [
            {
              "domain": [
                "camera"
              ]
            }
          ]
        }
      }
    }
  }
]